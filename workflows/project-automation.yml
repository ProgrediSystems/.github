# File: .github/workflows/project-automation.yml
# Place this in your ProgrediSystems/.github repository

name: ProgrediSystems Project Board Automation
on:
  issues:
    types: [opened, labeled, closed, reopened]
  pull_request:
    types: [opened, closed, merged]

jobs:
  auto-assign-to-projects:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'labeled'
    steps:
      - name: Add to Revenue Pipeline (#4)
        if: |
          contains(github.event.issue.labels.*.name, 'revenue-opportunity') ||
          contains(github.event.issue.labels.*.name, 'contract-opportunity') ||
          contains(github.event.issue.labels.*.name, 'client-opportunity') ||
          contains(github.event.issue.title, '$') ||
          contains(github.event.issue.title, 'contract') ||
          contains(github.event.issue.title, 'RFP') ||
          contains(github.event.issue.title, 'revenue')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/4
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Core Development (#5)
        if: |
          contains(github.event.issue.labels.*.name, 'feature') ||
          contains(github.event.issue.labels.*.name, 'enhancement') ||
          contains(github.event.issue.labels.*.name, 'ai-enhancement') ||
          contains(github.event.issue.labels.*.name, 'bug') ||
          contains(github.event.issue.title, 'feature') ||
          contains(github.event.issue.title, 'enhancement') ||
          contains(github.event.issue.title, 'AI') ||
          github.repository == 'ProgrediSystems/progredi-core' ||
          github.repository == 'ProgrediSystems/ai-capabilities'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/5
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Defense Market Focus (#6)
        if: |
          contains(github.event.issue.labels.*.name, 'government-rfp') ||
          contains(github.event.issue.labels.*.name, 'cmmc') ||
          contains(github.event.issue.labels.*.name, 'defense-contract') ||
          contains(github.event.issue.labels.*.name, 'compliance') ||
          contains(github.event.issue.title, 'government') ||
          contains(github.event.issue.title, 'DoD') ||
          contains(github.event.issue.title, 'Army') ||
          contains(github.event.issue.title, 'Navy') ||
          contains(github.event.issue.title, 'CMMC') ||
          github.repository == 'ProgrediSystems/cmmc-compliance' ||
          github.repository == 'ProgrediSystems/progredi-cai-m' ||
          github.repository == 'ProgrediSystems/core-readiness'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/6
          github-token: ${{ secrets.GITHUB_TOKEN }}

  revenue-impact-calculator:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'revenue-opportunity') ||
      contains(github.event.issue.title, '$') ||
      contains(github.event.issue.title, 'contract') ||
      contains(github.event.issue.title, 'revenue')
    steps:
      - name: Extract Revenue Data
        id: extract
        run: |
          # Extract potential value from issue title and body
          TITLE="${{ github.event.issue.title }}"
          BODY="${{ github.event.issue.body }}"
          
          # Look for dollar amounts (handles $1M, $500K, $2.5M format)
          VALUE=$(echo "$TITLE $BODY" | grep -oE '\$[0-9]+\.?[0-9]*[KMB]?' | head -1 || echo "TBD")
          
          # Determine source repository
          REPO="${{ github.repository }}"
          SOURCE=$(echo $REPO | cut -d'/' -f2)
          
          # Detect contract type
          CONTRACT_TYPE="Commercial"
          if echo "$TITLE $BODY" | grep -iq "government\|dod\|army\|navy\|air force\|marines\|dhs"; then
            CONTRACT_TYPE="Government"
          fi
          
          echo "value=$VALUE" >> $GITHUB_OUTPUT
          echo "source=$SOURCE" >> $GITHUB_OUTPUT
          echo "contract_type=$CONTRACT_TYPE" >> $GITHUB_OUTPUT

      - name: Add Revenue Analysis Comment
        uses: actions/github-script@v7
        with:
          script: |
            const value = "${{ steps.extract.outputs.value }}";
            const source = "${{ steps.extract.outputs.source }}";
            const contractType = "${{ steps.extract.outputs.contract_type }}";
            
            // Determine priority based on value
            let priority = "Medium";
            if (value.includes("M") || (value.includes("K") && parseInt(value.replace(/[^\d]/g, '')) >= 500)) {
              priority = "High";
            }
            if (value.includes("B") || (value.includes("M") && parseInt(value.replace(/[^\d]/g, '')) >= 5)) {
              priority = "Critical";
            }
            
            const comment = `## üí∞ Revenue Impact Analysis (AI-Generated)
            
            **Detected Value**: ${value}
            **Contract Type**: ${contractType}
            **Source Repository**: ${source}
            **Recommended Priority**: ${priority}
            
            ### üéØ Automatic Project Assignment:
            ‚úÖ **Revenue Pipeline** (#4) ‚Üí üí° Opportunities column
            ${contractType === 'Government' ? '‚úÖ **Defense Market Focus** (#6) ‚Üí üèõÔ∏è Contract Opportunities' : ''}
            
            ### üìã Next Steps Checklist:
            - [ ] **Validate Revenue Estimate** - Confirm actual contract value
            - [ ] **Set PWin Probability** - Estimate likelihood of winning (10-100%)
            - [ ] **Add Timeline** - Proposal deadline and decision dates
            - [ ] **Assign Team** - Identify proposal team members
            - [ ] **Competitive Analysis** - Research known competitors
            - [ ] **Resource Planning** - Estimate required team and budget
            
            ### üéÆ Project Board Actions:
            1. **Move to üìã Qualifying** when details are confirmed
            2. **Move to üéØ This Quarter** when actively pursuing
            3. **Update custom fields** with contract value and probability
            4. **Move to üîÑ In Progress** when proposal is being written
            
            ### üîó Quick Links:
            - [Revenue Pipeline Board](https://github.com/orgs/ProgrediSystems/projects/4)
            - [Defense Market Board](https://github.com/orgs/ProgrediSystems/projects/6)
            - [All Revenue Opportunities](https://github.com/orgs/ProgrediSystems/projects/4?filterQuery=label%3Arevenue-opportunity)
            
            ---
            *ü§ñ This analysis was auto-generated by ProgrediSystems AI. Update the issue to recalculate.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  ai-powered-labeling:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Auto-Apply Smart Labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();
            const repo = context.repo.repo;
            
            const labelsToAdd = [];
            
            // AI-powered label detection
            
            // Revenue opportunity detection
            if (title.includes('$') || title.includes('contract') || title.includes('rfp') || 
                title.includes('revenue') || title.includes('opportunity')) {
              labelsToAdd.push('revenue-opportunity');
            }
            
            // Government contract detection
            if (title.includes('government') || title.includes('dod') || title.includes('army') || 
                title.includes('navy') || title.includes('air force') || title.includes('federal')) {
              labelsToAdd.push('government-rfp');
            }
            
            // Feature development detection
            if (title.includes('feature') || title.includes('add') || title.includes('new') ||
                title.includes('implement') || title.includes('create')) {
              labelsToAdd.push('feature');
            }
            
            // AI/ML detection
            if (title.includes('ai') || title.includes('ml') || title.includes('machine learning') ||
                title.includes('artificial intelligence') || title.includes('automation')) {
              labelsToAdd.push('ai-enhancement');
            }
            
            // Bug detection
            if (title.includes('bug') || title.includes('fix') || title.includes('error') ||
                title.includes('issue') || title.includes('problem')) {
              labelsToAdd.push('bug');
            }
            
            // CMMC/Compliance detection
            if (title.includes('cmmc') || title.includes('compliance') || title.includes('security') ||
                title.includes('certification') || repo === 'cmmc-compliance') {
              labelsToAdd.push('cmmc');
            }
            
            // Priority detection based on value
            if (title.match(/\$[1-9][0-9]*[Mm]/) || title.includes('critical') || title.includes('urgent')) {
              labelsToAdd.push('priority-high');
            } else if (title.match(/\$[1-9][0-9]*[Bb]/) || title.includes('major')) {
              labelsToAdd.push('priority-critical');
            }
            
            // Repository-specific labels
            if (repo === 'core-contracts') {
              labelsToAdd.push('contract-opportunity');
            } else if (repo === 'client-engagement-system') {
              labelsToAdd.push('client-opportunity');
            } else if (repo === 'progredi-cai-m') {
              labelsToAdd.push('defense-contract');
            }
            
            // Apply detected labels
            if (labelsToAdd.length > 0) {
              console.log(`Auto-applying labels: ${labelsToAdd.join(', ')}`);
              
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: labelsToAdd
                });
                
                // Add a comment explaining the auto-labeling
                const labelComment = `## üè∑Ô∏è AI Auto-Labeling Applied
                
                The following labels were automatically applied based on issue analysis:
                ${labelsToAdd.map(label => `- \`${label}\``).join('\n')}
                
                **Reasoning**: Content analysis detected keywords related to these categories.
                
                Feel free to add or remove labels as needed. The project boards will update automatically.
                
                ---
                *ü§ñ Auto-generated by ProgrediSystems AI labeling system*`;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: labelComment
                });
                
              } catch (error) {
                console.error('Error applying labels:', error);
              }
            }

  weekly-project-health:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Generate Weekly Project Health Report
        uses: actions/github-script@v7
        with:
          script: |
            // Weekly project health monitoring
            console.log("Generating weekly project health report...");
            
            // This would analyze project board health, velocity, etc.
            // Implementation can be expanded based on needs

---

# File: .github/workflows/setup-labels.yml  
# Run this once to create standard labels across repositories

name: Setup ProgrediSystems Standard Labels
on:
  workflow_dispatch:  # Run manually
  repository_dispatch:
    types: [setup-labels]

jobs:
  create-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Create ProgrediSystems Standard Labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [
              // Revenue Labels (Green family)
              { name: 'revenue-opportunity', color: '22c55e', description: 'üí∞ Potential revenue generating opportunity' },
              { name: 'contract-opportunity', color: '16a34a', description: 'üèõÔ∏è Government contract opportunity' },
              { name: 'client-opportunity', color: '65a30d', description: 'ü§ù Commercial client opportunity' },
              { name: 'cost-reduction', color: '84cc16', description: 'üíµ Reduces operational costs' },
              
              // Development Labels (Blue family)
              { name: 'feature', color: '3b82f6', description: 'üöÄ New feature development' },
              { name: 'enhancement', color: '6366f1', description: '‚ö° Improve existing functionality' },
              { name: 'ai-enhancement', color: '8b5cf6', description: 'ü§ñ AI/ML enhancement opportunity' },
              { name: 'bug', color: 'ef4444', description: 'üêõ Bug fix required' },
              
              // Defense/Government Labels (Purple family)
              { name: 'government-rfp', color: '7c3aed', description: 'üèõÔ∏è Government RFP or contract' },
              { name: 'cmmc', color: '6d28d9', description: 'üõ°Ô∏è CMMC compliance related' },
              { name: 'defense-contract', color: '5b21b6', description: '‚öîÔ∏è Defense/military contract' },
              { name: 'compliance', color: '4c1d95', description: 'üìã Compliance or certification' },
              
              // Priority Labels (Traffic light colors)
              { name: 'priority-critical', color: 'dc2626', description: 'üî¥ Critical priority - revenue/business impact' },
              { name: 'priority-high', color: 'ea580c', description: 'üü† High priority' },
              { name: 'priority-medium', color: 'ca8a04', description: 'üü° Medium priority' },
              { name: 'priority-low', color: '16a34a', description: 'üü¢ Low priority' },
              
              // Process Labels (Gray family)
              { name: 'needs-triage', color: '6b7280', description: 'üîç Needs initial review and prioritization' },
              { name: 'blocked', color: '374151', description: 'üö´ Blocked by external dependency' },
              { name: 'in-review', color: '4b5563', description: 'üëÄ Under review' },
              { name: 'sprint-ready', color: '059669', description: '‚úÖ Ready for sprint inclusion' }
            ];

            let created = 0;
            let existing = 0;
            
            for (const label of labels) {
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ...label
                });
                console.log(`‚úÖ Created label: ${label.name}`);
                created++;
              } catch (error) {
                if (error.status === 422) {
                  console.log(`‚ÑπÔ∏è Label ${label.name} already exists`);
                  existing++;
                } else {
                  console.error(`‚ùå Error creating label ${label.name}:`, error.message);
                }
              }
            }
            
            console.log(`\nüìä Summary: ${created} labels created, ${existing} already existed`);

---

# File: .github/workflows/contract-specific.yml
# Enhanced automation for core-contracts repository

name: Core Contracts Automation
on:
  issues:
    types: [opened, labeled, edited]

jobs:
  contract-opportunity-analysis:
    runs-on: ubuntu-latest
    if: |
      github.repository == 'ProgrediSystems/core-contracts' && (
        contains(github.event.issue.labels.*.name, 'contract-opportunity') ||
        contains(github.event.issue.title, 'contract') ||
        contains(github.event.issue.title, 'RFP') ||
        contains(github.event.issue.title, 'proposal')
      )
    steps:
      - name: Enhanced Contract Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title;
            const body = issue.body || '';
            
            // Extract contract details
            const contractNumber = title.match(/([A-Z0-9-]+(?:RFP|SOL|Contract|Award)[A-Z0-9-]*)/i)?.[1] || 'TBD';
            const value = title.match(/\$([0-9,]+(?:\.[0-9]{2})?[KMB]?)/)?.[1] || body.match(/\$([0-9,]+(?:\.[0-9]{2})?[KMB]?)/)?.[1] || 'TBD';
            const agency = title.match(/(Army|Navy|Air Force|Marines|DHS|DOD|Defense|Federal)/i)?.[1] || 'TBD';
            const deadline = body.match(/deadline[:\s]*([0-9]{4}-[0-9]{2}-[0-9]{2}|[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4})/i)?.[1] || 'TBD';
            
            // Calculate PWin based on contract characteristics
            let pwin = 50; // Default
            if (title.toLowerCase().includes('sole source')) pwin = 85;
            else if (title.toLowerCase().includes('limited competition')) pwin = 65;
            else if (title.toLowerCase().includes('small business')) pwin = 70;
            else if (title.toLowerCase().includes('incumbent')) pwin = 75;
            
            const comment = `## üèõÔ∏è Government Contract Analysis
            
            **Contract Number**: ${contractNumber}
            **Estimated Value**: $${value}
            **Agency**: ${agency}
            **Proposal Deadline**: ${deadline}
            **Initial PWin Estimate**: ${pwin}%
            
            ### üéØ Project Board Status:
            ‚úÖ **Added to Revenue Pipeline** (#4) ‚Üí üí° Opportunities
            ‚úÖ **Added to Defense Market Focus** (#6) ‚Üí üèõÔ∏è Contract Opportunities
            
            ### üìã Contract Pursuit Checklist:
            
            #### Phase 1: Opportunity Assessment (Week 1)
            - [ ] **RFP Analysis**: Download and review full RFP
            - [ ] **Requirements Mapping**: Map requirements to capabilities
            - [ ] **Competitive Analysis**: Identify likely competitors
            - [ ] **Teaming Strategy**: Determine prime vs. sub approach
            - [ ] **Go/No-Go Decision**: Complete bid decision matrix
            
            #### Phase 2: Proposal Development (Week 2-3)
            - [ ] **Technical Approach**: Develop solution architecture
            - [ ] **Past Performance**: Gather relevant project examples
            - [ ] **Team Assembly**: Identify key personnel
            - [ ] **Cost Modeling**: Develop pricing strategy
            - [ ] **Compliance Review**: Ensure all requirements met
            
            #### Phase 3: Submission & Follow-up (Week 4+)
            - [ ] **Final Review**: Quality assurance check
            - [ ] **Submission**: Submit via required portal
            - [ ] **Q&A Period**: Respond to government questions
            - [ ] **Orals Prep**: Prepare for potential presentations
            
            ### üîó Useful Links:
            - [Revenue Pipeline](https://github.com/orgs/ProgrediSystems/projects/4)
            - [Defense Market Focus](https://github.com/orgs/ProgrediSystems/projects/6)
            - [Contract Opportunities View](https://github.com/orgs/ProgrediSystems/projects/6?filterQuery=label%3Acontract-opportunity)
            
            ### üéÆ Board Movement Guide:
            1. **Current**: üí° Opportunities (newly identified)
            2. **Next**: üìã Qualifying (after initial analysis)
            3. **Then**: üéØ This Quarter (if Go decision made)
            4. **Finally**: üîÑ In Progress (during proposal writing)
            
            ---
            *ü§ñ Generated by ProgrediSystems Contract Intelligence System*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
