# File: .github/workflows/ai-enhanced-automation.yml
# Replace or enhance your existing project-automation.yml with this version

name: ProgrediSystems AI-Enhanced Project Automation
on:
  issues:
    types: [opened, labeled, edited, closed, reopened]

jobs:
  auto-assign-to-projects:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'labeled'
    steps:
      - name: Add to Revenue Pipeline (#4)
        if: |
          contains(github.event.issue.labels.*.name, 'revenue-opportunity') ||
          contains(github.event.issue.labels.*.name, 'contract-opportunity') ||
          contains(github.event.issue.title, '$') ||
          contains(github.event.issue.title, 'contract') ||
          contains(github.event.issue.title, 'revenue')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/4
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Core Development (#5)
        if: |
          contains(github.event.issue.labels.*.name, 'feature') ||
          contains(github.event.issue.labels.*.name, 'enhancement') ||
          contains(github.event.issue.labels.*.name, 'ai-enhancement') ||
          contains(github.event.issue.title, 'feature') ||
          contains(github.event.issue.title, 'add') ||
          contains(github.event.issue.title, 'implement') ||
          github.repository == 'ProgrediSystems/progredi-core'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/5
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Defense Market Focus (#6)
        if: |
          contains(github.event.issue.labels.*.name, 'government-rfp') ||
          contains(github.event.issue.labels.*.name, 'defense-contract') ||
          contains(github.event.issue.labels.*.name, 'cmmc') ||
          contains(github.event.issue.title, 'government') ||
          contains(github.event.issue.title, 'DoD') ||
          contains(github.event.issue.title, 'Army') ||
          contains(github.event.issue.title, 'Navy') ||
          contains(github.event.issue.title, 'Air Force') ||
          contains(github.event.issue.title, 'CMMC') ||
          github.repository == 'ProgrediSystems/cmmc-compliance' ||
          github.repository == 'ProgrediSystems/progredi-cai-m'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/6
          github-token: ${{ secrets.GITHUB_TOKEN }}

  ai-powered-labeling:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: AI Auto-Labeling and Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();
            const repo = context.repo.repo;
            
            console.log(`Analyzing issue: "${issue.title}" in ${repo}`);
            
            const labelsToAdd = [];
            let priority = '';
            let contractValue = '';
            let contractType = 'Commercial';
            
            // AI-powered content detection
            
            // Revenue opportunity detection
            const dollarMatch = issue.title.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/);
            if (dollarMatch || title.includes('contract') || title.includes('rfp') || 
                title.includes('revenue') || title.includes('opportunity')) {
              labelsToAdd.push('revenue-opportunity');
              contractValue = dollarMatch ? dollarMatch[1] : 'TBD';
            }
            
            // Government contract detection
            if (title.includes('government') || title.includes('dod') || title.includes('army') || 
                title.includes('navy') || title.includes('air force') || title.includes('federal') ||
                title.includes('defense') || title.includes('military')) {
              labelsToAdd.push('government-rfp');
              contractType = 'Government';
            }
            
            // Contract opportunity detection
            if (title.includes('contract') || title.includes('rfp') || title.includes('proposal')) {
              labelsToAdd.push('contract-opportunity');
            }
            
            // Feature development detection
            if (title.includes('feature') || title.includes('add') || title.includes('new') ||
                title.includes('implement') || title.includes('create') || title.includes('build')) {
              labelsToAdd.push('feature');
            }
            
            // AI/ML detection
            if (title.includes('ai') || title.includes('ml') || title.includes('machine learning') ||
                title.includes('artificial intelligence') || title.includes('automation') ||
                title.includes('constitutional ai')) {
              labelsToAdd.push('ai-enhancement');
            }
            
            // Bug detection
            if (title.includes('bug') || title.includes('fix') || title.includes('error') ||
                title.includes('issue') || title.includes('problem') || title.includes('broken')) {
              labelsToAdd.push('bug');
            }
            
            // CMMC/Compliance detection
            if (title.includes('cmmc') || title.includes('compliance') || title.includes('security') ||
                title.includes('certification') || repo === 'cmmc-compliance') {
              labelsToAdd.push('cmmc');
            }
            
            // Defense-specific detection
            if (repo === 'progredi-cai-m' || title.includes('constitutional') || 
                title.includes('defense') || title.includes('military')) {
              labelsToAdd.push('defense-contract');
            }
            
            // Priority detection based on value and keywords
            if (contractValue) {
              const numValue = parseFloat(contractValue.replace(/[^0-9.]/g, ''));
              const multiplier = contractValue.includes('M') ? 1000000 : 
                               contractValue.includes('K') ? 1000 : 
                               contractValue.includes('B') ? 1000000000 : 1;
              const totalValue = numValue * multiplier;
              
              if (totalValue >= 1000000 || title.includes('critical') || title.includes('urgent')) {
                priority = 'priority-critical';
              } else if (totalValue >= 100000 || title.includes('high') || title.includes('important')) {
                priority = 'priority-high';
              } else if (totalValue >= 10000) {
                priority = 'priority-medium';
              }
            } else if (title.includes('critical') || title.includes('urgent')) {
              priority = 'priority-critical';
            } else if (title.includes('high') || title.includes('important')) {
              priority = 'priority-high';
            }
            
            // Add priority label if determined
            if (priority) {
              labelsToAdd.push(priority);
            }
            
            // Apply detected labels
            if (labelsToAdd.length > 0) {
              console.log(`Auto-applying labels: ${labelsToAdd.join(', ')}`);
              
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: labelsToAdd
                });
                
                console.log(`✅ Successfully applied ${labelsToAdd.length} labels`);
                
              } catch (error) {
                console.error('❌ Error applying labels:', error.message);
              }
            }
            
            // Store analysis results for the next job
            core.setOutput('labels_applied', labelsToAdd.join(','));
            core.setOutput('contract_value', contractValue);
            core.setOutput('contract_type', contractType);
            core.setOutput('priority', priority);
            core.setOutput('repo_name', repo);

  revenue-impact-analysis:
    runs-on: ubuntu-latest
    needs: ai-powered-labeling
    if: |
      contains(github.event.issue.title, '$') ||
      contains(github.event.issue.title, 'contract') ||
      contains(github.event.issue.title, 'revenue') ||
      contains(github.event.issue.title, 'opportunity')
    steps:
      - name: Generate Revenue Impact Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title;
            const body = issue.body || '';
            const repo = context.repo.repo;
            
            // Extract financial and contract details
            const dollarMatch = title.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/);
            const contractValue = dollarMatch ? dollarMatch[1] : 'TBD';
            
            // Determine contract type
            const isGovernment = /government|dod|army|navy|air force|federal|defense|military/i.test(title);
            const contractType = isGovernment ? 'Government' : 'Commercial';
            
            // Calculate priority based on value
            let priority = 'Medium';
            let priorityEmoji = '🟡';
            if (contractValue !== 'TBD') {
              const numValue = parseFloat(contractValue.replace(/[^0-9.]/g, ''));
              const multiplier = contractValue.includes('M') ? 1000000 : 
                               contractValue.includes('K') ? 1000 : 
                               contractValue.includes('B') ? 1000000000 : 1;
              const totalValue = numValue * multiplier;
              
              if (totalValue >= 1000000) {
                priority = 'Critical';
                priorityEmoji = '🔴';
              } else if (totalValue >= 100000) {
                priority = 'High';
                priorityEmoji = '🟠';
              }
            }
            
            // Estimate PWin based on contract characteristics
            let pwin = 50;
            let pwinReasoning = 'Standard competitive opportunity';
            
            if (title.toLowerCase().includes('sole source')) {
              pwin = 85;
              pwinReasoning = 'Sole source opportunity - high confidence';
            } else if (title.toLowerCase().includes('incumbent')) {
              pwin = 75;
              pwinReasoning = 'Incumbent advantage';
            } else if (title.toLowerCase().includes('small business') || title.toLowerCase().includes('sbir')) {
              pwin = 70;
              pwinReasoning = 'Small business set-aside advantage';
            } else if (title.toLowerCase().includes('limited competition')) {
              pwin = 65;
              pwinReasoning = 'Limited competition - better odds';
            } else if (isGovernment) {
              pwin = 45;
              pwinReasoning = 'Government competition - typically challenging';
            }
            
            // Generate project board assignments
            let projectAssignments = '✅ **Revenue Pipeline** (#4) → 💡 Opportunities column';
            if (isGovernment) {
              projectAssignments += '\n✅ **Defense Market Focus** (#6) → 🏛️ Contract Opportunities column';
            }
            if (title.toLowerCase().includes('feature') || title.toLowerCase().includes('ai') || repo === 'progredi-core') {
              projectAssignments += '\n✅ **Core Development** (#5) → 📋 Backlog column';
            }
            
            // Create comprehensive analysis comment
            const analysisComment = `## 💰 AI Revenue Impact Analysis
            
**Contract Value**: $${contractValue}
**Contract Type**: ${contractType}
**Source Repository**: ${repo}
**AI Priority Assessment**: ${priorityEmoji} ${priority}
**Estimated PWin**: ${pwin}% - ${pwinReasoning}

### 🎯 Automatic Project Assignments:
${projectAssignments}

### 📊 Financial Analysis:
${contractValue !== 'TBD' ? `- **Expected Value**: $${contractValue} × ${pwin}% = $${calculateExpectedValue(contractValue, pwin)}` : '- **Expected Value**: Pending value confirmation'}
- **Risk Level**: ${priority === 'Critical' ? 'High reward, strategic importance' : priority === 'High' ? 'Moderate risk, good opportunity' : 'Standard opportunity'}
- **Resource Impact**: ${contractValue !== 'TBD' && contractValue.includes('M') ? 'Significant team allocation required' : 'Standard resource allocation'}

### 📋 AI-Recommended Action Plan:

#### Phase 1: Opportunity Qualification (Week 1)
- [ ] **Validate Contract Details** - Confirm actual value, timeline, and requirements
- [ ] **Competitive Intelligence** - Research known competitors and their capabilities
- [ ] **Requirements Analysis** - Map RFP requirements to ProgrediSystems capabilities
- [ ] **Go/No-Go Assessment** - Complete bid decision matrix
- [ ] **Update PWin Estimate** - Refine probability based on detailed analysis

#### Phase 2: Proposal Preparation (Week 2-3)
- [ ] **Technical Approach** - Develop solution architecture and methodology
- [ ] **Team Assembly** - Identify key personnel and past performance examples
- [ ] **Partnership Strategy** - Determine teaming arrangements if needed
- [ ] **Cost Development** - Create detailed pricing and cost model
- [ ] **Risk Assessment** - Identify and mitigate proposal risks

#### Phase 3: Submission & Follow-up (Week 4+)
- [ ] **Quality Review** - Conduct thorough proposal review
- [ ] **Compliance Check** - Ensure all RFP requirements addressed
- [ ] **Submission Process** - Submit via required portal/method
- [ ] **Post-Submission** - Prepare for Q&A period and potential orals

### 🎮 Project Board Workflow:
1. **Start**: 💡 Opportunities (current location)
2. **After qualification**: Move to 📋 Qualifying when details confirmed
3. **If pursuing**: Move to 🎯 This Quarter when go decision made
4. **During development**: Move to 🔄 In Progress during proposal writing
5. **Awaiting results**: Move to 👀 Client Review after submission
6. **If won**: Move to 💰 Revenue Impact when contract awarded

### 🔗 Quick Access Links:
- [Revenue Pipeline Board](https://github.com/orgs/ProgrediSystems/projects/4)
- [Defense Market Board](https://github.com/orgs/ProgrediSystems/projects/6)
- [Core Development Board](https://github.com/orgs/ProgrediSystems/projects/5)
- [All Revenue Opportunities](https://github.com/orgs/ProgrediSystems/projects/4?filterQuery=label%3Arevenue-opportunity)

### 🤖 AI Insights:
${generateAIInsights(title, contractType, contractValue, repo)}

---
*🧠 This analysis was generated by ProgrediSystems AI Project Management System. Update the issue title or description to trigger re-analysis.*`;

            // Post the analysis comment
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: analysisComment
              });
              
              console.log('✅ Revenue impact analysis comment posted successfully');
              
            } catch (error) {
              console.error('❌ Error posting analysis comment:', error.message);
            }
            
            // Helper function to calculate expected value
            function calculateExpectedValue(value, probability) {
              if (value === 'TBD') return 'TBD';
              
              const numValue = parseFloat(value.replace(/[^0-9.]/g, ''));
              const multiplier = value.includes('M') ? 1000000 : 
                               value.includes('K') ? 1000 : 
                               value.includes('B') ? 1000000000 : 1;
              const totalValue = numValue * multiplier;
              const expectedValue = (totalValue * probability) / 100;
              
              if (expectedValue >= 1000000) {
                return `${(expectedValue / 1000000).toFixed(1)}M`;
              } else if (expectedValue >= 1000) {
                return `${(expectedValue / 1000).toFixed(0)}K`;
              } else {
                return expectedValue.toFixed(0);
              }
            }
            
            // Helper function to generate AI insights
            function generateAIInsights(title, contractType, value, repo) {
              const insights = [];
              
              if (contractType === 'Government') {
                insights.push('🏛️ **Government Advantage**: ProgrediSystems\' defense focus and CMMC compliance provide competitive positioning');
              }
              
              if (title.toLowerCase().includes('ai') || title.toLowerCase().includes('constitutional')) {
                insights.push('🤖 **AI Expertise Match**: This opportunity aligns with ProgrediSystems\' core AI and Constitutional AI capabilities');
              }
              
              if (repo === 'progredi-cai-m') {
                insights.push('⚔️ **Strategic Alignment**: Leverages Constitutional AI for Mission Systems - unique market differentiator');
              }
              
              if (value !== 'TBD' && value.includes('M')) {
                insights.push('💎 **High-Value Opportunity**: Major contract requiring senior leadership involvement and strategic planning');
              }
              
              if (insights.length === 0) {
                insights.push('📈 **Growth Opportunity**: Standard opportunity to expand ProgrediSystems market presence');
              }
              
              return insights.join('\n');
            }

  smart-labeling-comment:
    runs-on: ubuntu-latest
    needs: ai-powered-labeling
    if: github.event.action == 'opened'
    steps:
      - name: Add Smart Labeling Summary
        uses: actions/github-script@v7
        with:
          script: |
            // Wait a moment for labels to be applied
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Get the current labels on the issue
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const appliedLabels = issue.labels.map(label => label.name);
            
            if (appliedLabels.length > 0) {
              const labelComment = `## 🏷️ AI Smart Labeling Applied

The following labels were automatically detected and applied:
${appliedLabels.map(label => `- \`${label}\` ${getLabelEmoji(label)}`).join('\n')}

### 🧠 AI Detection Reasoning:
${generateLabelReasoning(context.payload.issue.title, appliedLabels, context.repo.repo)}

### 📊 Impact on Project Boards:
${generateProjectImpact(appliedLabels)}

*Feel free to add or remove labels as needed. Project boards will update automatically.*

---
*🤖 Powered by ProgrediSystems AI Labeling System*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: labelComment
              });
            }
            
            function getLabelEmoji(label) {
              const emojiMap = {
                'revenue-opportunity': '💰',
                'contract-opportunity': '🏛️',
                'feature': '🚀',
                'ai-enhancement': '🤖',
                'government-rfp': '🏛️',
                'priority-critical': '🔴',
                'priority-high': '🟠',
                'priority-medium': '🟡',
                'cmmc': '🛡️',
                'defense-contract': '⚔️'
              };
              return emojiMap[label] || '🏷️';
            }
            
            function generateLabelReasoning(title, labels, repo) {
              const reasons = [];
              
              if (labels.includes('revenue-opportunity')) {
                if (title.includes('$')) {
                  reasons.push('💰 **Revenue Opportunity**: Dollar amount detected in title');
                } else {
                  reasons.push('💰 **Revenue Opportunity**: Keywords suggest financial opportunity');
                }
              }
              
              if (labels.includes('government-rfp')) {
                reasons.push('🏛️ **Government RFP**: Government/military keywords detected');
              }
              
              if (labels.includes('feature')) {
                reasons.push('🚀 **Feature**: Development keywords detected (add, implement, create)');
              }
              
              if (labels.includes('ai-enhancement')) {
                reasons.push('🤖 **AI Enhancement**: AI/ML/automation keywords detected');
              }
              
              if (labels.includes('priority-critical') || labels.includes('priority-high')) {
                reasons.push('⚡ **High Priority**: High-value or urgent keywords detected');
              }
              
              return reasons.join('\n');
            }
            
            function generateProjectImpact(labels) {
              const impacts = [];
              
              if (labels.includes('revenue-opportunity')) {
                impacts.push('📈 **Revenue Pipeline** (#4): Added to opportunities tracking');
              }
              
              if (labels.includes('feature')) {
                impacts.push('💻 **Core Development** (#5): Added to development backlog');
              }
              
              if (labels.includes('government-rfp') || labels.includes('defense-contract')) {
                impacts.push('🏛️ **Defense Market Focus** (#6): Added to government contracts tracking');
              }
              
              return impacts.join('\n');
            }
