name: ProgrediSystems Intelligent Automation
on:
  issues:
    types: [opened, labeled, edited]

jobs:
  assign-to-projects:
    runs-on: ubuntu-latest
    steps:
      - name: Add to Revenue Pipeline
        if: |
          contains(github.event.issue.title, '$') || 
          contains(github.event.issue.title, 'contract') || 
          contains(github.event.issue.title, 'RFP') ||
          contains(github.event.issue.title, 'proposal') ||
          contains(github.event.issue.title, 'revenue')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/4
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Defense Market
        if: |
          contains(github.event.issue.title, 'Army') || 
          contains(github.event.issue.title, 'Navy') ||
          contains(github.event.issue.title, 'government') || 
          contains(github.event.issue.title, 'DoD') ||
          contains(github.event.issue.title, 'federal') ||
          contains(github.event.issue.title, 'DARPA') ||
          contains(github.event.issue.title, 'SBIR')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/6
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Core Development
        if: |
          contains(github.event.issue.title, 'feature') || 
          contains(github.event.issue.title, 'add') ||
          contains(github.event.issue.title, 'implement') ||
          contains(github.event.issue.title, 'build') ||
          contains(github.event.issue.title, 'create') ||
          contains(github.event.issue.title, 'develop') ||
          github.repository == 'ProgrediSystems/progredi-core' ||
          github.repository == 'ProgrediSystems/ai-capabilities'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/5
          github-token: ${{ secrets.GITHUB_TOKEN }}

  intelligent-categorization:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Smart Content Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = (context.payload.issue.body || '').toLowerCase();
            const repo = context.repo.repo;
            const labels = [];
            
            console.log('Analyzing:', context.payload.issue.title);
            
            // Enhanced content analysis to distinguish types
            const fullText = title + ' ' + body;
            
            // CONTRACT OPPORTUNITY DETECTION - Be more specific
            const contractIndicators = [
              /\b(rfp|request for proposal)\b/,
              /\b(solicitation|sol-?\d+)\b/,
              /\b(contract.*opportunity)\b/,
              /\b(proposal.*due|proposal.*deadline)\b/,
              /\b(procurement|acquisition)\b/,
              /\b(bid|bidding)\b/,
              /\b(award|contract.*award)\b/,
              /\b(idiq|gsa|oasis)\b/,
              /\b(prime.*contract|subcontract)\b/
            ];
            
            const hasContractIndicators = contractIndicators.some(pattern => pattern.test(fullText));
            const hasDollarAmount = /\$[\d,]+[kmb]?/i.test(title);
            
            // FEATURE DEVELOPMENT DETECTION
            const featureIndicators = [
              /\b(add|create|build|implement|develop)\b.*\b(feature|functionality|component|module)\b/,
              /\b(new.*feature|feature.*request)\b/,
              /\b(enhancement|improvement|upgrade)\b/,
              /\b(dashboard|interface|ui|ux)\b/,
              /\b(api|endpoint|integration)\b/,
              /\b(bug.*fix|fix.*bug|defect)\b/,
              /\b(optimization|performance)\b/,
              /\b(testing|qa|quality)\b/
            ];
            
            const hasFeatureIndicators = featureIndicators.some(pattern => pattern.test(fullText));
            
            // REVENUE OPPORTUNITY DETECTION (broader than contracts)
            const revenueIndicators = [
              /\b(revenue.*potential|revenue.*opportunity)\b/,
              /\b(client.*engagement|customer.*project)\b/,
              /\b(commercial.*opportunity)\b/,
              /\b(sales.*opportunity|business.*development)\b/,
              /\b(partnership|strategic.*alliance)\b/,
              /\b(license|licensing.*agreement)\b/
            ];
            
            const hasRevenueIndicators = revenueIndicators.some(pattern => pattern.test(fullText));
            
            // SMART LABELING LOGIC
            
            // 1. CONTRACT OPPORTUNITIES (most specific)
            if (hasContractIndicators || (hasDollarAmount && /\b(government|dod|army|navy|federal)\b/i.test(fullText))) {
              labels.push('contract-opportunity');
              console.log('Detected: Contract opportunity');
              
              // Determine contract type
              if (/\b(government|dod|army|navy|air force|federal|darpa)\b/i.test(fullText)) {
                labels.push('government-rfp');
                console.log('Detected: Government RFP');
              }
              
              if (/\b(sbir|sttr|small business)\b/i.test(fullText)) {
                labels.push('sbir-sttr');
                console.log('Detected: SBIR/STTR');
              }
            }
            
            // 2. FEATURE DEVELOPMENT (technical work)
            else if (hasFeatureIndicators || 
                     repo === 'progredi-core' || 
                     repo === 'ai-capabilities' ||
                     repo === 'client-engagement-system') {
              labels.push('feature');
              console.log('Detected: Feature development');
              
              if (/\b(ai|artificial intelligence|machine learning|constitutional)\b/i.test(fullText)) {
                labels.push('ai-enhancement');
                console.log('Detected: AI enhancement');
              }
            }
            
            // 3. REVENUE OPPORTUNITIES (commercial/business development)
            else if (hasRevenueIndicators || 
                     (hasDollarAmount && !/\b(cost|budget|expense)\b/i.test(fullText))) {
              labels.push('revenue-opportunity');
              console.log('Detected: Revenue opportunity');
            }
            
            // 4. GENERAL BUSINESS VALUE (if has dollar amount but unclear type)
            else if (hasDollarAmount) {
              labels.push('business-value');
              console.log('Detected: General business value');
            }
            
            // PRIORITY DETECTION (applies to all types)
            if (hasDollarAmount) {
              const valueMatch = title.match(/\$([0-9,]+\.?[0-9]*[kmb]?)/i);
              if (valueMatch) {
                const value = valueMatch[1].toLowerCase();
                const numValue = parseFloat(value.replace(/[^0-9.]/g, ''));
                
                if (value.includes('b') || (value.includes('m') && numValue >= 5)) {
                  labels.push('priority-critical');
                  console.log('Detected: Critical priority');
                } else if (value.includes('m') || (value.includes('k') && numValue >= 500)) {
                  labels.push('priority-high');
                  console.log('Detected: High priority');
                } else if (numValue >= 100) {
                  labels.push('priority-medium');
                  console.log('Detected: Medium priority');
                }
              }
            }
            
            // TECHNICAL CATEGORIES
            if (/\b(bug|error|defect|broken)\b/i.test(fullText)) {
              labels.push('bug');
              console.log('Detected: Bug fix');
            }
            
            if (/\b(cmmc|compliance|security.*audit|certification)\b/i.test(fullText)) {
              labels.push('compliance');
              console.log('Detected: Compliance work');
            }
            
            // Apply labels and create analysis
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              
              // Determine primary category for comment
              let primaryCategory = 'General Business Item';
              let categoryIcon = '📋';
              
              if (labels.includes('contract-opportunity')) {
                primaryCategory = 'Contract Opportunity';
                categoryIcon = '🏛️';
              } else if (labels.includes('feature')) {
                primaryCategory = 'Feature Development';
                categoryIcon = '🚀';
              } else if (labels.includes('revenue-opportunity')) {
                primaryCategory = 'Revenue Opportunity';
                categoryIcon = '💰';
              } else if (labels.includes('bug')) {
                primaryCategory = 'Bug Fix';
                categoryIcon = '🐛';
              }
              
              const categorizationComment = '## 🏷️ Intelligent Categorization\n\n' +
                '**Primary Category**: ' + categoryIcon + ' ' + primaryCategory + '\n' +
                '**Auto-applied labels**: ' + labels.join(', ') + '\n' +
                '**Repository**: ' + repo + '\n\n' +
                '**Analysis Confidence**: ' + (labels.length >= 3 ? 'High' : labels.length >= 2 ? 'Medium' : 'Low') + '\n\n' +
                '🤖 *Intelligent categorization system*';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: categorizationComment
              });
            }

  financial-analysis:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.title, '$') || 
      contains(github.event.issue.title, 'contract') ||
      contains(github.event.issue.title, 'revenue')
    steps:
      - name: Contextual Financial Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title;
            const body = context.payload.issue.body || '';
            const repo = context.repo.repo;
            const fullText = title.toLowerCase() + ' ' + body.toLowerCase();
            
            console.log('Financial analysis for:', title);
            
            // Determine the TYPE of financial opportunity
            let opportunityType = 'Unknown';
            let analysisApproach = 'general';
            
            // CONTRACT OPPORTUNITY
            const contractIndicators = [
              /\b(rfp|request for proposal|solicitation|procurement|bid)\b/,
              /\b(contract.*opportunity|prime.*contract|subcontract)\b/,
              /\b(government|dod|army|navy|federal)\b/
            ];
            
            if (contractIndicators.some(pattern => pattern.test(fullText))) {
              opportunityType = 'Contract Opportunity';
              analysisApproach = 'contract';
            }
            
            // FEATURE/PRODUCT DEVELOPMENT
            else if (/\b(feature|add|create|build|implement|develop|dashboard|platform)\b/.test(fullText)) {
              opportunityType = 'Product Development';
              analysisApproach = 'product';
            }
            
            // REVENUE/BUSINESS DEVELOPMENT
            else if (/\b(revenue|client|customer|commercial|sales|business)\b/.test(fullText)) {
              opportunityType = 'Business Development';
              analysisApproach = 'business';
            }
            
            // Extract financial data
            const valueMatch = title.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/i) || body.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/i);
            let contractValue = 'TBD';
            let numericValue = 0;
            
            if (valueMatch) {
              contractValue = valueMatch[1];
              const cleanValue = contractValue.replace(/[^0-9.]/g, '');
              numericValue = parseFloat(cleanValue);
              
              if (contractValue.toUpperCase().includes('K')) {
                numericValue *= 1000;
              } else if (contractValue.toUpperCase().includes('M')) {
                numericValue *= 1000000;
              } else if (contractValue.toUpperCase().includes('B')) {
                numericValue *= 1000000000;
              }
            }
            
            // CONTEXTUAL ANALYSIS based on opportunity type
            let pwin, pwinReason, expectedValue, riskLevel, recommendations;
            
            if (analysisApproach === 'contract') {
              // CONTRACT-SPECIFIC ANALYSIS
              const isGovernment = /\b(government|dod|army|navy|federal|darpa)\b/i.test(fullText);
              
              pwin = 50; // Base
              const pwinFactors = [];
              
              if (/\bsole source\b/i.test(fullText)) {
                pwin = 85;
                pwinFactors.push('Sole source (+35%)');
                pwinReason = 'Sole source - very high confidence';
              } else if (/\blimited competition\b/i.test(fullText)) {
                pwin = 65;
                pwinFactors.push('Limited competition (+15%)');
                pwinReason = 'Limited competition - good positioning';
              } else if (isGovernment) {
                pwin = 45;
                pwinFactors.push('Government competition (-5%)');
                pwinReason = 'Government competition - standard difficulty';
              } else {
                pwin = 60;
                pwinFactors.push('Commercial opportunity (+10%)');
                pwinReason = 'Commercial contract - favorable odds';
              }
              
              if (/\b(ai|constitutional|machine learning)\b/i.test(fullText)) {
                pwin += 10;
                pwinFactors.push('AI expertise match (+10%)');
              }
              
              riskLevel = numericValue >= 5000000 ? 'High' : numericValue >= 1000000 ? 'Medium-High' : 'Medium';
              recommendations = [
                '📋 Conduct thorough RFP analysis',
                '🤝 Assess teaming opportunities',
                '💼 Prepare go/no-go decision matrix',
                '📊 Develop competitive pricing strategy'
              ];
              
            } else if (analysisApproach === 'product') {
              // PRODUCT DEVELOPMENT ANALYSIS
              pwin = 75; // Higher confidence for internal development
              pwinReason = 'Internal product development - high control';
              
              riskLevel = 'Low-Medium';
              recommendations = [
                '🎯 Define clear success metrics',
                '👥 Assign dedicated development team',
                '📈 Plan phased rollout approach',
                '💡 Consider AI enhancement opportunities'
              ];
              
            } else {
              // BUSINESS DEVELOPMENT ANALYSIS
              pwin = 65;
              pwinReason = 'Business development opportunity';
              
              riskLevel = 'Medium';
              recommendations = [
                '🤝 Engage with client stakeholders',
                '📊 Develop value proposition',
                '💰 Create pricing strategy',
                '📋 Plan delivery approach'
              ];
            }
            
            // Calculate expected value
            if (numericValue > 0) {
              const expected = (numericValue * pwin) / 100;
              
              if (expected >= 1000000) {
                expectedValue = '$' + (expected / 1000000).toFixed(1) + 'M';
              } else if (expected >= 1000) {
                expectedValue = '$' + (expected / 1000).toFixed(0) + 'K';
              } else {
                expectedValue = '$' + expected.toFixed(0);
              }
            } else {
              expectedValue = 'TBD';
            }
            
            // Generate contextual analysis
            const analysisComment = '## 💰 Contextual Financial Analysis\n\n' +
              '### 📊 Opportunity Assessment\n' +
              '**Type**: ' + opportunityType + '\n' +
              '**Value**: $' + contractValue + '\n' +
              '**Repository**: ' + repo + '\n' +
              '**Risk Level**: ' + riskLevel + '\n\n' +
              
              '### 🎯 Success Probability\n' +
              '**Probability**: ' + pwin + '%\n' +
              '**Reasoning**: ' + pwinReason + '\n' +
              '**Expected Value**: ' + expectedValue + '\n\n' +
              
              '### 📋 Recommended Actions\n' +
              recommendations.map(r => '- ' + r).join('\n') + '\n\n' +
              
              '### 🎮 Project Workflow\n' +
              (opportunityType === 'Contract Opportunity' ? 
                '🏛️ **Contract Path**: Opportunity → Qualification → Proposal → Award\n' :
                opportunityType === 'Product Development' ?
                '🚀 **Development Path**: Backlog → Sprint → Development → Testing → Release\n' :
                '💼 **Business Path**: Lead → Qualification → Proposal → Negotiation → Close\n') +
              
              '\n---\n' +
              '🧠 **Contextual AI Analysis** | Type: ' + opportunityType + ' | ' + new Date().toLocaleDateString();
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisComment
            });
