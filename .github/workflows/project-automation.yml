name: ProgrediSystems Advanced AI Automation
on:
  issues:
    types: [opened, labeled, edited]

jobs:
  assign-to-projects:
    runs-on: ubuntu-latest
    steps:
      - name: Add to Revenue Pipeline
        if: contains(github.event.issue.title, '$') || contains(github.event.issue.title, 'contract')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/4
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Defense Market
        if: contains(github.event.issue.title, 'Army') || contains(github.event.issue.title, 'government') || contains(github.event.issue.title, 'DoD')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/6
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Core Development
        if: contains(github.event.issue.title, 'feature') || contains(github.event.issue.title, 'add') || contains(github.event.issue.title, 'AI')
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/ProgrediSystems/projects/5
          github-token: ${{ secrets.GITHUB_TOKEN }}

  smart-labeling:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Advanced Smart Labeling
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = (context.payload.issue.body || '').toLowerCase();
            const labels = [];
            
            // Revenue opportunity detection
            if (title.includes('$') || title.includes('contract') || title.includes('revenue')) {
              labels.push('revenue-opportunity');
            }
            
            // Government contract detection with specificity
            if (title.includes('army') || title.includes('government') || title.includes('dod') || 
                title.includes('navy') || title.includes('air force') || title.includes('federal')) {
              labels.push('government-rfp');
            }
            
            // Contract type detection
            if (title.includes('prime') || body.includes('prime contractor')) {
              labels.push('prime-contract');
            } else if (title.includes('sub') || body.includes('subcontract')) {
              labels.push('subcontract');
            }
            
            // IDIQ/GSA detection
            if (title.includes('idiq') || title.includes('gsa') || body.includes('indefinite delivery')) {
              labels.push('idiq-contract');
            }
            
            // SBIR/STTR detection
            if (title.includes('sbir') || title.includes('sttr') || body.includes('small business innovation')) {
              labels.push('sbir-sttr');
            }
            
            // Feature development
            if (title.includes('feature') || title.includes('add') || title.includes('implement')) {
              labels.push('feature');
            }
            
            // AI/ML detection
            if (title.includes('ai') || title.includes('constitutional') || title.includes('machine learning')) {
              labels.push('ai-enhancement');
            }
            
            // Priority detection based on value
            const valueMatch = title.match(/\$([0-9,]+\.?[0-9]*[kmb]?)/i);
            if (valueMatch) {
              const value = valueMatch[1].toLowerCase();
              const numValue = parseFloat(value.replace(/[^0-9.]/g, ''));
              
              if (value.includes('b') || (value.includes('m') && numValue >= 10)) {
                labels.push('priority-critical');
              } else if (value.includes('m') || (value.includes('k') && numValue >= 500)) {
                labels.push('priority-high');
              } else if (numValue >= 100) {
                labels.push('priority-medium');
              }
            }
            
            // Competition level detection
            if (title.includes('sole source') || body.includes('sole source')) {
              labels.push('sole-source');
            } else if (title.includes('limited competition') || body.includes('limited competition')) {
              labels.push('limited-competition');
            } else if (title.includes('full competition') || body.includes('full competition')) {
              labels.push('full-competition');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 🏷️ Advanced AI Labeling\n\n**Auto-applied labels**: ' + labels.join(', ') + '\n\n**Detection confidence**: High\n\n🤖 Enhanced labeling system'
              });
            }

  advanced-financial-analysis:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '$') || contains(github.event.issue.title, 'contract')
    steps:
      - name: Comprehensive Financial Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title;
            const body = context.payload.issue.body || '';
            const repo = context.repo.repo;
            
            // Enhanced value extraction
            const valueMatch = title.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/i) || body.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/i);
            let contractValue = 'TBD';
            let numericValue = 0;
            
            if (valueMatch) {
              contractValue = valueMatch[1];
              const cleanValue = contractValue.replace(/[^0-9.]/g, '');
              numericValue = parseFloat(cleanValue);
              
              if (contractValue.toUpperCase().includes('K')) {
                numericValue *= 1000;
              } else if (contractValue.toUpperCase().includes('M')) {
                numericValue *= 1000000;
              } else if (contractValue.toUpperCase().includes('B')) {
                numericValue *= 1000000000;
              }
            }
            
            // Contract type analysis
            const isGovernment = /army|navy|government|dod|air force|federal|defense|military|usaf|usmc/i.test(title + ' ' + body);
            const contractType = isGovernment ? 'Government' : 'Commercial';
            
            // Advanced PWin calculation
            let pwin = 50;
            let pwinFactors = [];
            let pwinReasoning = 'Base competitive assessment';
            
            // Competition level impact
            if (/sole source/i.test(title + ' ' + body)) {
              pwin = 85;
              pwinFactors.push('Sole source (+35%)');
              pwinReasoning = 'Sole source opportunity - very high confidence';
            } else if (/limited competition/i.test(title + ' ' + body)) {
              pwin = 65;
              pwinFactors.push('Limited competition (+15%)');
              pwinReasoning = 'Limited competition - good positioning';
            } else if (/incumbent/i.test(title + ' ' + body)) {
              pwin = 75;
              pwinFactors.push('Incumbent advantage (+25%)');
              pwinReasoning = 'Incumbent position - strong advantage';
            }
            
            // Contract type adjustments
            if (isGovernment && pwin === 50) {
              pwin = 45;
              pwinFactors.push('Government competition (-5%)');
              pwinReasoning = 'Government competition - standard difficulty';
            } else if (!isGovernment && pwin === 50) {
              pwin = 60;
              pwinFactors.push('Commercial opportunity (+10%)');
              pwinReasoning = 'Commercial opportunity - favorable odds';
            }
            
            // SBIR/Small business advantages
            if (/sbir|sttr|small business/i.test(title + ' ' + body)) {
              pwin += 15;
              pwinFactors.push('Small business advantage (+15%)');
            }
            
            // ProgrediSystems strengths
            if (/ai|artificial intelligence|constitutional|machine learning/i.test(title + ' ' + body)) {
              pwin += 10;
              pwinFactors.push('AI expertise match (+10%)');
            }
            
            if (/defense|military|dod/i.test(title + ' ' + body)) {
              pwin += 8;
              pwinFactors.push('Defense market focus (+8%)');
            }
            
            // Cap PWin at realistic maximum
            pwin = Math.min(pwin, 95);
            
            // Risk assessment
            let riskLevel = 'Medium';
            let riskFactors = [];
            
            if (numericValue >= 10000000) { // $10M+
              riskLevel = 'High';
              riskFactors.push('Large contract size');
            } else if (numericValue >= 1000000) { // $1M+
              riskLevel = 'Medium-High';
              riskFactors.push('Significant contract value');
            }
            
            if (isGovernment) {
              riskFactors.push('Government contract complexity');
            }
            
            if (pwin < 40) {
              riskLevel = 'High';
              riskFactors.push('Low probability of win');
            }
            
            // Expected value calculation
            let expectedValue = 'TBD';
            let roi = 'TBD';
            
            if (numericValue > 0) {
              const expected = (numericValue * pwin) / 100;
              
              if (expected >= 1000000) {
                expectedValue = '$' + (expected / 1000000).toFixed(1) + 'M';
              } else if (expected >= 1000) {
                expectedValue = '$' + (expected / 1000).toFixed(0) + 'K';
              } else {
                expectedValue = '$' + expected.toFixed(0);
              }
              
              // Estimate development cost (10-15% of contract value)
              const estimatedCost = numericValue * 0.125;
              const netProfit = expected - estimatedCost;
              const roiPercent = ((netProfit / estimatedCost) * 100).toFixed(0);
              roi = roiPercent + '%';
            }
            
            // Market analysis
            let marketInsights = [];
            
            if (isGovernment) {
              marketInsights.push('🏛️ Government contracts typically have 12-18 month sales cycles');
              marketInsights.push('📋 Requires CMMC compliance and security clearances');
            }
            
            if (/ai|constitutional/i.test(title + ' ' + body)) {
              marketInsights.push('🤖 Leverages ProgrediSystems core AI competencies');
              marketInsights.push('⚔️ Constitutional AI provides unique market differentiation');
            }
            
            if (numericValue >= 5000000) {
              marketInsights.push('💎 Large contract requiring C-level involvement');
              marketInsights.push('🤝 May require teaming partnerships');
            }
            
            // Generate comprehensive analysis
            const analysisComment = '## 💰 Advanced Financial Analysis\n\n' +
              '### 📊 Contract Overview\n' +
              '**Value**: $' + contractValue + '\n' +
              '**Type**: ' + contractType + '\n' +
              '**Repository**: ' + repo + '\n' +
              '**Risk Level**: ' + riskLevel + '\n\n' +
              
              '### 🎯 PWin Analysis\n' +
              '**Probability of Win**: ' + pwin + '%\n' +
              '**Reasoning**: ' + pwinReasoning + '\n' +
              '**Contributing Factors**:\n' +
              (pwinFactors.length > 0 ? pwinFactors.map(f => '- ' + f).join('\n') : '- Standard competitive factors') + '\n\n' +
              
              '### 💵 Financial Projections\n' +
              '**Expected Value**: ' + expectedValue + '\n' +
              '**Estimated ROI**: ' + roi + '\n' +
              '**Risk Factors**: ' + (riskFactors.length > 0 ? riskFactors.join(', ') : 'Standard business risks') + '\n\n' +
              
              '### 📈 Market Intelligence\n' +
              (marketInsights.length > 0 ? marketInsights.join('\n') + '\n\n' : '') +
              
              '### 🎮 Project Board Assignments\n' +
              '✅ Revenue Pipeline (#4) - ' + expectedValue + ' expected\n' +
              (isGovernment ? '✅ Defense Market Focus (#6) - Government contract\n' : '') +
              (title.toLowerCase().includes('feature') || title.toLowerCase().includes('ai') ? '✅ Core Development (#5) - Technical development\n' : '') +
              '\n### 📋 Strategic Recommendations\n' +
              
              (pwin >= 70 ? '🟢 **PURSUE**: High probability opportunity\n' :
               pwin >= 50 ? '🟡 **EVALUATE**: Competitive opportunity requiring analysis\n' :
               '🔴 **CAUTION**: Low probability - consider strategic value only\n') +
              
              (numericValue >= 5000000 ? '💼 **Executive Decision Required**: Large contract needs C-level approval\n' : '') +
              (isGovernment ? '🛡️ **Compliance Check**: Ensure CMMC and security requirements met\n' : '') +
              (riskLevel === 'High' ? '⚠️ **Risk Mitigation**: Develop comprehensive risk management plan\n' : '') +
              
              '\n### 🔗 Quick Actions\n' +
              '- [Revenue Pipeline](https://github.com/orgs/ProgrediSystems/projects/4)\n' +
              '- [Defense Market](https://github.com/orgs/ProgrediSystems/projects/6)\n' +
              '- [Financial Controls](https://github.com/ProgrediSystems/financial-controls)\n\n' +
              
              '---\n' +
              '🧠 **Advanced AI Financial Analysis** | Confidence: High | Last Updated: ' + new Date().toLocaleDateString();
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisComment
            });

  market-competitive-analysis:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '$') && github.event.action == 'opened'
    steps:
      - name: Competitive Intelligence
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title;
            const body = context.payload.issue.body || '';
            
            const valueMatch = title.match(/\$([0-9,]+\.?[0-9]*[KMB]?)/i);
            if (!valueMatch) return;
            
            const contractValue = valueMatch[1];
            const isGovernment = /army|navy|government|dod|air force|federal|defense|military/i.test(title + ' ' + body);
            const isAI = /ai|artificial intelligence|constitutional|machine learning/i.test(title + ' ' + body);
            
            let competitiveFactors = [];
            let marketPosition = 'Competitive';
            
            // Analyze competitive positioning
            if (isAI && isGovernment) {
              competitiveFactors.push('🎯 **Constitutional AI Advantage**: Unique positioning in defense AI market');
              competitiveFactors.push('🏛️ **Government AI Focus**: Specialized experience in federal AI requirements');
              marketPosition = 'Strong';
            }
            
            if (isGovernment) {
              competitiveFactors.push('🛡️ **Defense Expertise**: Established government contracting capabilities');
              competitiveFactors.push('📋 **CMMC Compliance**: Security compliance provides competitive edge');
            }
            
            if (/small business|sbir|sttr/i.test(title + ' ' + body)) {
              competitiveFactors.push('🏢 **Small Business Status**: Advantage in set-aside opportunities');
              marketPosition = 'Favorable';
            }
            
            // Known competitors analysis
            let competitorInsights = [];
            
            if (isAI && isGovernment) {
              competitorInsights.push('🔍 **Key Competitors**: Booz Allen, CACI, SAIC, Palantir in government AI space');
              competitorInsights.push('💡 **Differentiation**: Constitutional AI approach provides unique value proposition');
            } else if (isGovernment) {
              competitorInsights.push('🔍 **Typical Competitors**: Large systems integrators and established defense contractors');
              competitorInsights.push('💡 **SMB Advantage**: Agility and specialized focus vs. large contractor overhead');
            }
            
            const competitiveComment = '## 🏆 Competitive Intelligence Analysis\n\n' +
              '### 🎯 Market Position\n' +
              '**Overall Position**: ' + marketPosition + '\n' +
              '**Contract Focus**: ' + (isGovernment ? 'Government/Defense' : 'Commercial') + '\n' +
              '**Technology Area**: ' + (isAI ? 'AI/ML Specialized' : 'General Technology') + '\n\n' +
              
              '### 💪 Competitive Advantages\n' +
              (competitiveFactors.length > 0 ? competitiveFactors.join('\n') + '\n\n' : 'Standard competitive positioning\n\n') +
              
              '### 🔍 Market Intelligence\n' +
              (competitorInsights.length > 0 ? competitorInsights.join('\n') + '\n\n' : '') +
              
              '### 📊 Win Strategy Recommendations\n' +
              (marketPosition === 'Strong' ? '🚀 **Aggressive Pursuit**: Strong competitive position warrants full investment\n' :
               marketPosition === 'Favorable' ? '📈 **Strategic Pursuit**: Good positioning with targeted approach\n' :
               '⚖️ **Selective Pursuit**: Evaluate resource allocation carefully\n') +
              
              '🎯 **Key Differentiators to Emphasize**:\n' +
              (isAI ? '- Constitutional AI expertise and ethical AI frameworks\n' : '') +
              (isGovernment ? '- Defense-focused experience and security compliance\n' : '') +
              '- Agile delivery and client-focused approach\n' +
              '- Technical innovation and cutting-edge solutions\n\n' +
              
              '---\n' +
              '🔍 **Competitive Intelligence** | Market Analysis | ' + new Date().toLocaleDateString();
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: competitiveComment
            });
